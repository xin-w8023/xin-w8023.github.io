{"meta":{"title":"CodeXin","subtitle":null,"description":null,"author":"XinWang","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"栈","slug":"Stack","date":"2019-03-11T12:41:51.550Z","updated":"2019-03-11T12:41:51.550Z","comments":true,"path":"2019/03/11/Stack/","link":"","permalink":"http://yoursite.com/2019/03/11/Stack/","excerpt":"","text":"496 Next Greater Element I EasyDescription: You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. Find all the next greater numbers for nums1‘s elements in the corresponding places of nums2. The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number. Example 1: 123456Input: nums1 = [4,1,2], nums2 = [1,3,4,2].Output: [-1,3,-1]Explanation: For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1. For number 1 in the first array, the next greater number for it in the second array is 3. For number 2 in the first array, there is no next greater number for it in the second array, so output -1. Example 2: 12345Input: nums1 = [2,4], nums2 = [1,2,3,4].Output: [3,-1]Explanation: For number 2 in the first array, the next greater number for it in the second array is 3. For number 4 in the first array, there is no next greater number for it in the second array, so output -1. Note: All elements in nums1 and nums2 are unique. The length of both nums1 and nums2 would not exceed 1000. Accepted Submissions 87,061 148,078 1 暴力解法：利用两个循环去解，复杂度O(n^2)，代码简单明了，如下： 123456789101112131415161718192021222324252627class Solution &#123;public: vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123; int n1 = findNums.size(); int n2 = nums.size(); vector&lt;int&gt; res(n1, 0); for (int i = 0; i &lt; n1; ++i) &#123; for (int j = 0; j &lt; n2; ++j) &#123; if (findNums[i] == nums[j]) &#123; res[i] = j; &#125; &#125; &#125; for (int i = 0; i &lt; n1; ++i) &#123; for (int j = res[i]; j &lt; n2; ++j)&#123; if (nums[j] &gt; findNums[i]) &#123; res[i] = nums[j]; break; &#125; if (j == n2-1) &#123; res[i] = -1; &#125; &#125; &#125; return res; &#125;&#125;; Status Runtime Memory Accepted 24 ms 9.1 MB 2 利用栈，复杂度O(n)。题目要求得到下一个比当前元素大的元素，所以设计一个栈，栈底至栈顶递减，栈顶元素是离当前元素最近的有可能比当前元素大的元素。（讲的比较含糊，看代码比较好理解） 123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123;public: vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; findNums, vector&lt;int&gt;&amp; nums) &#123; stack&lt;int&gt; st; unordered_map&lt;int, int&gt; m; // 逆序遍历nums，找出每个nums中每个元素的下一个最大值。 for (int i = nums.size()-1; i &gt;= 0; --i) &#123; /* * 栈非空时： 如果栈顶元素大与当前元素，则当前元素的下一个较大值为栈顶元素；否则， * 弹出栈顶元素，因为此时栈顶元素已不可能成为任何一个元素的下一个较大值；最后将当 * 前元素压入栈。 * 栈为空时：说明后续比当前元素大的元素不存在，赋值-1. */ while (!st.empty()) &#123; if (st.top() &gt; nums[i]) &#123; m[nums[i]] = st.top(); break; &#125; else &#123; st.pop(); &#125; &#125; if (st.empty()) &#123; m[nums[i]] = -1; &#125; st.push(nums[i]); &#125; vector&lt;int&gt; res; res.reserve(findNums.size()); for (auto&amp; num : findNums) res.push_back(m[num]); return res; &#125;&#125;;int _ = []() &#123; ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0;&#125; (); Status Runtime Memory Accepted 8 ms 9.5 MB","categories":[],"tags":[]},{"title":"动态规划","slug":"Dynamic-Programming","date":"2019-03-05T04:19:08.512Z","updated":"2019-03-05T04:19:08.512Z","comments":true,"path":"2019/03/05/Dynamic-Programming/","link":"","permalink":"http://yoursite.com/2019/03/05/Dynamic-Programming/","excerpt":"","text":"本文主要记录总结leetcode中动态规划问题的解题思路。按照easy，medium和hard三个标签记录。 简单题题号121Best Time to Buy and Sell Stock题目描述： Say you have an array for which the ith element is the price of a given stock on day i. If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit. Note that you cannot sell a stock before you buy one. 123456789Example 1:Input: [7,1,5,3,6,4]Output: 5Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Not 7-1 = 6, as selling price needs to be larger than buying price.Example 2:Input: [7,6,4,3,1]Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0. Accepted Submissions 440,239 952,043 本题的题意是从第一天到最后一天，你需要选择合适的时机去对股票进行买卖，从而使获得的利润最大化。 第一种最直接的方法就是暴力循环出所有方案，然后取所有方案的最大利润即可，时间复杂度O(n^2)，代码如下： 1234567891011121314class Solution &#123;public: int maxProfit(vector&lt;int&gt;&amp; prices) &#123; int pro = 0; int n = prices.size(); //利用两个循环，在第i天买入，在第j天卖出 for (int i = 0; i &lt; n; ++i) &#123; for (int j = i; j &lt; n; ++j) &#123; pro = max(prices[j]-prices[i], pro); &#125; &#125; return pro; &#125;&#125;; Status Runtime Memory Accepted 1744 ms 9.6 MB 第二种方法：获得最大利润的条件是找到两个差距最大的价格。以此为出发点，不难想到只要在遍历过程中，记录已遍历的最小值，并且记录每步的最大利润即可。代码如下： 12345678910111213class Solution &#123;public: int maxProfit(vector&lt;int&gt;&amp; prices) &#123; int pro = 0; int min_price = INT_MAX; for (int i = 0; i &lt; prices.size(); ++i) &#123; pro = max(pro, prices[i] - min_price); if (prices[i] &lt; min_price) min_price = prices[i]; &#125; return pro; &#125;&#125;; Status Runtime Memory Accepted 8 ms 9.5 MB To Be Continuing …","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-01T00:22:03.322Z","updated":"2019-03-01T00:22:03.322Z","comments":true,"path":"2019/03/01/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}